/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.55
 * Generated at: 2023-12-11 03:00:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.auth;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	int global = 0;//전변
	//왜 없냐면 jsp파일을 클래스 이름으로 변경하는 명명규칙이 플랫폼 마다 다르기때문에 이름을 알 수 없다
	void methodA(){//이 메소드 호출이 불가합니다. 왜냐면 인스턴스화를 할 수 없기때문에
		
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("    \r\n");

	//디클러레이션은 사용하지 않는다 - 전변, 메소드선언, 생성자선언
	//스크립틀릿 - 자바코드 - 예외)전변, 메소드선언, 생성자 선언, 인스턴스화 불가함
	String mem_name = (String)request.getAttribute("mem_name");
	String smem_name = (String)session.getAttribute("smem_name");
	out.print(mem_name);//sendRedirect로 요청하면 무조건 null출력됨. forward로 요청하면 출력됨
	out.print("<br>");
	out.print("세션 : "+smem_name);
	//테스트 시나리오 구분할것
	// -> 서블릿을 경유하지 않고 이 페이지가 요청된다면 sendRedirect이든 forward이든 무조건 null이 출력됨 
	// -> auth/index.jsp에서 아이디와 비번을 입력 후 로그인 버튼 누르면 auth/login.do를 요청하니까
	// 서블릿을 경유한 뒤 Login1Controller에서 sendRedirect로 index.jsp가 요청이 된다

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>index page - 로그인</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- \r\n");
      out.write("요청을 나타내는 문자열이 서블릿 매핑 이름 뒤에 붙어서.... -GET 방식 - 노출된다\r\n");
      out.write("내 비번이 다 보인다 - 보안취약\r\n");
      out.write("URL - req.getRequestURI() : 도메인을 제외한 나머지 값만, /auth/login.do\r\n");
      out.write("// req.getRequestURL() - full name모두 다. http://localhost:8000/auth/login.do\r\n");
      out.write("//요청 URL을 통해서 사용자의 요청사항을 구분할 수 있다.\r\n");
      out.write("auth/login.do\r\n");
      out.write("upmu[0] = auth - 컨트롤 클래스 이름으로 사용,\r\n");
      out.write("upmu[1] = login - 컨트롤클래스의 메소드이름사용\r\n");
      out.write(" -->\r\n");
      out.write("<!-- http://localhost:8000/auth/index.jsp -->\r\n");
      out.write("	<form id=\"f_login\" method=\"get\" action=\"./login.do\">\r\n");
      out.write("<!-- \r\n");
      out.write("id는 주로 정적페이지 그러니까 js에서 주로 사용하고 name은  서블릿에서 사용함\r\n");
      out.write("서블릿에서는 화면에서 입력한 값을 들을 때 name속성으로만 읽을 수 있다.\r\n");
      out.write("getParameter의 인자로 String name이 와야 하니까\r\n");
      out.write(" -->	\r\n");
      out.write("		<input type=\"text\" id=\"mem_id\" name=\"mem_id\"/><br>\r\n");
      out.write("		<input type=\"text\"  id=\"mem_pw\" name=\"mem_pw\"/><br>\r\n");
      out.write("		<input type=\"button\" value=\"로그인\" onclick=\"login()\"/>\r\n");
      out.write("	</form>\r\n");
      out.write("	<script>\r\n");
      out.write("		login = () => {\r\n");
      out.write("			console.log('login');\r\n");
      out.write("			document.querySelector(\"#f_login\").submit();\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
